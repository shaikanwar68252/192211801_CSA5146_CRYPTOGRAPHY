def generate_playfair_matrix(key):
    alphabet = 'ABCDEFGHIKLMNOPQRSTUVWXYZ'
    key = key.upper().replace('J', 'I')
    key += alphabet
    matrix = []

    for char in key:
        if char not in matrix:
            matrix.append(char)

    playfair_matrix = [matrix[i:i+5] for i in range(0, 25, 5)]
    return playfair_matrix

def find_position(matrix, letter):
    for i, row in enumerate(matrix):
        if letter in row:
            return i, row.index(letter)
    return None

def preprocess_text(plaintext):
    plaintext = plaintext.upper().replace('J', 'I')
    processed_text = ''
    i = 0
    while i < len(plaintext):
        if i + 1 < len(plaintext) and plaintext[i] == plaintext[i + 1]:
            processed_text += plaintext[i] + 'X'
            i += 1
        elif i + 1 < len(plaintext):
            processed_text += plaintext[i] + plaintext[i + 1]
            i += 2
        else:
            processed_text += plaintext[i] + 'X'
            i += 1
    return processed_text

def encrypt_playfair(plaintext, key):
    matrix = generate_playfair_matrix(key)
    ciphertext = ''
    plaintext = preprocess_text(plaintext)

    for i in range(0, len(plaintext), 2):
        pair = plaintext[i:i+2]
        row1, col1 = find_position(matrix, pair[0])
        row2, col2 = find_position(matrix, pair[1])

        if row1 == row2:
            ciphertext += matrix[row1][(col1 + 1) % 5] + matrix[row2][(col2 + 1) % 5]
        elif col1 == col2:
            ciphertext += matrix[(row1 + 1) % 5][col1] + matrix[(row2 + 1) % 5][col2]
        else:
            ciphertext += matrix[row1][col2] + matrix[row2][col1]

    return ciphertext

# Example Usage
key = 'KEYWORD'
plaintext = 'HELLO'
encrypted_text = encrypt_playfair(plaintext, key)
print(f'Encrypted Text: {encrypted_text}')
