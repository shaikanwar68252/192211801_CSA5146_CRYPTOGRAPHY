from itertools import cycle

def left_shift(bits, n):
    return bits[n:] + bits[:n]

def generate_subkeys(initial_key):
    pc1 = [57, 49, 41, 33, 25, 17, 9,
           1, 58, 50, 42, 34, 26, 18,
           10, 2, 59, 51, 43, 35, 27,
           19, 11, 3, 60, 52, 44, 36,
           63, 55, 47, 39, 31, 23, 15,
           7, 62, 54, 46, 38, 30, 22,
           14, 6, 61, 53, 45, 37, 29,
           21, 13, 5, 28, 20, 12, 4]

    pc2 = [14, 17, 11, 24, 1, 5,
           3, 28, 15, 6, 21, 10,
           23, 19, 12, 4, 26, 8,
           16, 7, 27, 20, 13, 2,
           41, 52, 31, 37, 47, 55,
           30, 40, 51, 45, 33, 48,
           44, 49, 39, 56, 34, 53,
           46, 42, 50, 36, 29, 32]

    key = [initial_key[i - 1] for i in pc1]

    left = key[:28]
    right = key[28:]

    subkeys = []
    for i in range(16):
        left = left_shift(left, 1 if i in [0, 1, 8, 15] else 2)
        right = left_shift(right, 1 if i in [0, 1, 8, 15] else 2)
        combined = left + right
        subkey = [combined[i - 1] for i in pc2]
        subkeys.append(subkey)

    return subkeys

# Initial Key (64 bits)
initial_key = [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1,
               0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1,
               0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1,
               0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0]

# Generate Subkeys
subkeys = generate_subkeys(initial_key)

# Print Subkeys
for i, subkey in enumerate(subkeys):
    print(f"Subkey {i + 1}: {subkey}")
