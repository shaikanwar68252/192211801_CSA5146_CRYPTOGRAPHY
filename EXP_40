from collections import Counter
import string

def decrypt(ciphertext, shift):
    decrypted = ""
    for char in ciphertext:
        if char.isalpha():
            shifted = ord(char) - shift
            if char.islower():
                decrypted += chr((shifted - ord('a')) % 26 + ord('a'))
            elif char.isupper():
                decrypted += chr((shifted - ord('A')) % 26 + ord('A'))
        else:
            decrypted += char
    return decrypted

def letter_frequency_attack(ciphertext):
    # Consider only alphabetic characters for frequency analysis
    filtered_text = ''.join([char for char in ciphertext.lower() if char.isalpha()])
    letter_count = Counter(filtered_text)
    most_common = letter_count.most_common(26)
    most_common_letters = [char for char, _ in most_common]
    
    possible_plaintexts = []
    for common_letter in most_common_letters:
        shift = ord(common_letter) - ord('e')
        decrypted_text = decrypt(ciphertext, shift)
        possible_plaintexts.append(decrypted_text)
    
    return possible_plaintexts

# Example Usage
ciphertext = "Khoor zruog"
possible_plaintexts = letter_frequency_attack(ciphertext)
for plaintext in possible_plaintexts:
    print(plaintext)
