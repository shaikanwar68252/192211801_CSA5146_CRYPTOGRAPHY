import random

def mod_exp(base, exponent, modulus):
    if modulus == 1:
        return 0
    result = 1
    base = base % modulus
    while exponent > 0:
        if exponent % 2 == 1:
            result = (result * base) % modulus
        exponent = exponent >> 1
        base = (base * base) % modulus
    return result

def diffie_hellman():
    q = 353  # Prime number
    a = random.randint(2, q - 1)  # Public number
    xA = random.randint(2, q - 1)  # Alice's secret number
    xB = random.randint(2, q - 1)  # Bob's secret number

    # Alice computes A = (a^xA) mod q
    A = mod_exp(a, xA, q)

    # Bob computes B = (a^xB) mod q
    B = mod_exp(a, xB, q)

    # Alice and Bob exchange A and B
    # They compute the shared secret key
    key_Alice = mod_exp(B, xA, q)
    key_Bob = mod_exp(A, xB, q)

    return key_Alice, key_Bob

# Perform Diffie-Hellman key exchange
alice_key, bob_key = diffie_hellman()
print("Alice's Key:", alice_key)
print("Bob's Key:", bob_key)
